generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  phone         String?       @unique
  phoneVerified DateTime?     @map("phone_verified")
  image         String?
  accounts      Account[]
  eventMembers  EventMember[]
  eventPhotos   EventPhoto[]
  createdEvents Event[]       @relation("EventCreator")
  sessions      Session[]

  @@map("users")
}

model Event {
  id          String        @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String        @map("creator_id")
  members     EventMember[]
  photos      EventPhoto[]
  creator     User          @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("events")
}

model EventMember {
  id      String @id @default(cuid())
  eventId String @map("event_id")
  userId  String @map("user_id")
  role    String @default("member")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_members")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model EventPhoto {
  id               String   @id @default(cuid())
  eventId          String   @map("event_id")
  uploaderId       String   @map("uploader_id")
  filename         String
  originalName     String   @map("original_name")
  mimeType         String   @map("mime_type")
  size             Int
  url              String
  r2Key            String   @map("r2_key")
  caption          String?
  createdAt        DateTime @default(now())
  thumbnail_r2_key String?
  thumbnail_url    String?
  event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader         User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@map("event_photos")
}
